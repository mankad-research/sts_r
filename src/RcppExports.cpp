// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lpbdcpp
double lpbdcpp(const arma::vec& alpha_d, const arma::mat& Sigma_Inv, const arma::mat& kappa_t, const arma::mat& kappa_s, const arma::vec& mu_d, const arma::umat& docs, int V, const arma::vec& mv);
RcppExport SEXP _sts_lpbdcpp(SEXP alpha_dSEXP, SEXP Sigma_InvSEXP, SEXP kappa_tSEXP, SEXP kappa_sSEXP, SEXP mu_dSEXP, SEXP docsSEXP, SEXP VSEXP, SEXP mvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_d(alpha_dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Inv(Sigma_InvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa_t(kappa_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa_s(kappa_sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_d(mu_dSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mv(mvSEXP);
    rcpp_result_gen = Rcpp::wrap(lpbdcpp(alpha_d, Sigma_Inv, kappa_t, kappa_s, mu_d, docs, V, mv));
    return rcpp_result_gen;
END_RCPP
}
// lgaecpp
arma::vec lgaecpp(const arma::vec& alpha_d, const arma::mat& Sigma_Inv, const arma::mat& kappa_t, const arma::mat& kappa_s, const arma::vec& mu_d, const arma::umat& docs, int V, const arma::vec& mv);
RcppExport SEXP _sts_lgaecpp(SEXP alpha_dSEXP, SEXP Sigma_InvSEXP, SEXP kappa_tSEXP, SEXP kappa_sSEXP, SEXP mu_dSEXP, SEXP docsSEXP, SEXP VSEXP, SEXP mvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_d(alpha_dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Inv(Sigma_InvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa_t(kappa_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa_s(kappa_sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_d(mu_dSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mv(mvSEXP);
    rcpp_result_gen = Rcpp::wrap(lgaecpp(alpha_d, Sigma_Inv, kappa_t, kappa_s, mu_d, docs, V, mv));
    return rcpp_result_gen;
END_RCPP
}
// esthcpp
arma::mat esthcpp(const arma::vec& alpha_d, const arma::mat& kappa_t, const arma::mat& kappa_s, const arma::mat& Sigma_Inv, const arma::mat& doc, int V, const arma::vec& mv);
RcppExport SEXP _sts_esthcpp(SEXP alpha_dSEXP, SEXP kappa_tSEXP, SEXP kappa_sSEXP, SEXP Sigma_InvSEXP, SEXP docSEXP, SEXP VSEXP, SEXP mvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_d(alpha_dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa_t(kappa_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa_s(kappa_sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Inv(Sigma_InvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type doc(docSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mv(mvSEXP);
    rcpp_result_gen = Rcpp::wrap(esthcpp(alpha_d, kappa_t, kappa_s, Sigma_Inv, doc, V, mv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sts_lpbdcpp", (DL_FUNC) &_sts_lpbdcpp, 8},
    {"_sts_lgaecpp", (DL_FUNC) &_sts_lgaecpp, 8},
    {"_sts_esthcpp", (DL_FUNC) &_sts_esthcpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_sts(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
